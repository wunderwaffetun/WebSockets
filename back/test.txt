import dotenv from 'dotenv'
import mongoose from 'mongoose'
import { v4 as uuidv4} from 'uuid';
import { Server } from 'socket.io';
import express from "express";
import { createServer } from "http";

dotenv.config()

const io = new Server({cors: {origin: "*"}});
let socket = null
io.on('connection', async (socket) => {
  try {
    const data = await getData()
    socket.emit('data', data)
  } catch (err) {
    console.log(err)
  }

  socket.on('deleteData', async ({ id, innStr }) => {
    try {
      await deleteData(id, innStr)
      const newData = await getData()
      io.emit('updatedData', newData)
    } catch (err) {
      console.log(err)
      socket.emit('error', err.message)
    }
  })

  socket.on('createData', async ({ innStr }) => {
    try {
      await createData(innStr)
      const newData = await getData()
      io.emit('updatedData', newData)
    } catch (err) {
      console.log(err)
      socket.emit('error', err.message)
    }
  })
});

const name = process.env.NAME,
  password = process.env.PASS

const url = `mongodb+srv://${name}:${password}@cluster0.duf8uyv.mongodb.net/?retryWrites=true&w=majority`

mongoose.connect(url, { useNewUrlParser: true, useUnifiedTopology: true });
const schema = mongoose.Schema({_id: String, innStr: Number });
let INN = mongoose.model('inn', schema);

const deleteData = async(id, innStr) => {
  return INN.deleteOne({_id: id, innStr})
    .then(data => JSON.stringify(data))
    .catch( err => console.log(err))
}

const createData = async(innStr) => {
  return INN.create({_id: uuidv4(), innStr})
    .then(data => JSON.stringify(data))
    .catch( err => console.log(err))
}

const getData = async () => {
  return INN.find({})
    .then(data => JSON.stringify(data))
}

const updateAssociation = async () => {
  const db = await mongoose.createConnection(url).asPromise()

  INN = db.model('inn', schema)
  INN.collection.drop()

  let session = null
  INN.createCollection()
    .then(async () => {
      session = await db.startSession()
      const handleData = {_id: uuidv4(), innStr: Math.random()}
      return INN.create(handleData)
    })
    .then(() => {
      session.startTransaction()
      return INN.find({}).session(session)
    })
    .then(data => console.log(data))
}

updateAssociation()

io.listen(8080)
















///////////////////////////////// work 


// import dotenv from 'dotenv'
// import * as mongoose from 'mongoose'
// import { v4 as uuidv4} from 'uuid';
// import { WebSocketServer, WebSocket } from 'ws';

// dotenv.config()
// const wss = new WebSocketServer({ port: 8080 });

// wss.on('options', function (req, res) {
//   res.setHeader('Access-Control-Allow-Origin', '*');
//   res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
//   res.setHeader('Access-Control-Allow-Methods', 'OPTIONS, GET');
//   res.writeHead(200);
//   res.end();
// });

// wss.on('connection', async function connection(ws) {
//   ws.on('error', console.error);

//   ws.on('message', async function message(data) {
//     const {type, payload} = JSON.parse(data)
//     switch( type ){
//       case 'delete':
//         deleteData(payload)
//           .catch( err => { 
//             ws.send(JSON.stringify(err)) 
//             console.log(err)
//           })
//           .then( async result => {
//             sendAllClients(await getData())
//             // ws.send(await getData())
//           })
//         break
//       case 'create':
//         createData(payload)
//           .catch( err => { 
//             ws.send(JSON.stringify(err)) 
//             console.log(err)
//           })
//           .then( async result => {
//             sendAllClients(await getData())

//             // ws.send(await getData())
//           })
//         break
//       default:
//         ws.send('wtf')
//     }
//   });
//   ws.send(await getData())
// });

// function sendAllClients(data) {
//   wss.clients.forEach(function each(client) {
    
//     if (client.readyState === WebSocket.OPEN) {
//       client.send(data);
//     }
//   });
// }



// const name = process.env.NAME,
//       password = process.env.PASS

// const url = `mongodb+srv://${name}:${password}@cluster0.duf8uyv.mongodb.net/?retryWrites=true&w=majority`

// mongoose.connect(url, { useNewUrlParser: true, useUnifiedTopology: true });
// const shema = mongoose.Schema({_id: String, innStr: Number });
// let INN = mongoose.model('inn', shema);

// const deleteData = async({ id, innStr }) => {
//   return INN.deleteOne({_id: id, innStr})
//     .then(data => JSON.stringify(data))
//     .catch( err => console.log(err))
// }



// const createData = async({ innStr }) => {
//   return INN.create({_id: uuidv4(), innStr})
//     .then(data => JSON.stringify(data))
//     .catch( err => console.log(err))
// }


// const getData = async () => {
//   return INN.find({})
//     .then(data => JSON.stringify(data))
// }

// const updateAssociation = async () => {
//   const db = await mongoose.createConnection(url).asPromise()
  
//   INN = db.model('inn', shema)
//   INN.collection.drop()

//   let session = null 
//   INN.createCollection()
//     .then(() => db.startSession())
//     .then(_session => {
//       session = _session
//       // const handleData = data.map( (num) => {return {_id: uuidv4(), innStr: num}})
//       const handleData = {_id: uuidv4(), innStr: Math.random()}
//       return INN.create(handleData)
//     })
//     .then(() => {
//       session.startTransaction()
//       return INN.find({}).session(session)
//     })
//     .then(data => console.log(data))
// }

// updateAssociation()




// const data = [
//   175601765422,   
//   175601765422,   
//   212279937981,   
//   352119893737,   
//   871688858942,   
//   292186217387,   
//   508658081779,   
//   349391560270,   
//   971159424841,   
//   909766132012,   
//   811798013812,   
//   158084946182,   
//   598703129612,   
//   493993109742,   
//   181394837188,   
//   770019801230,   
//   287050186153,   
//   223613788714,   
//   161897744138,   
//   534166293503,   
//   549562931722,   
//   290488364812,   
//   470866420894,   
//   874799436390,   
//   455964255927,   
//   352596955608,   
//   966746066214,   
//   237740042714,   
//   201011117744,   
//   779510796931,   
//   846170889634,
// ]
